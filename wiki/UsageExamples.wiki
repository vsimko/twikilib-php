#summary Usage Examples.

Table of contents:
<wiki:toc max_depth="2" />

= API initialization =
{{{
require_once 'path/to/init-twiki-api.php';

use twikilib\core\Config;
use twikilib\core\FilesystemDB;

$config = new Config('path/to/config.ini');
$db = new FilesystemDB($config);
}}}

Example config.ini file:
{{{
[Config]
  twikiRootDir = /var/www/twiki42
  twikiWebUrl = http://research.ciant.cz/twiki42
  userName = TWikiPhpLibUser
  defaultWeb = Main
}}}

= Handling errors =
== Non-existing topic ==
{{{
use twikilib\core\TopicNotFoundException;
...
try {
  $topic = $db->loadTopicByName('SomeNonExistingTopic');
  // this line will never be reached
  ...
} catch(TopicNotFoundException $e) {
  echo "Sorry, could not find the topic.";
  exit;
}
}}}

== Non-published form field ==
There are two possibilities.
 * Either the default strict mode is used which causes exceptions to be thrown when a non-published field is accessed,
 * or the silent mode is used which returns empty values for such fields

{{{
// handling exceptions in strict mode
use twikilib\nodes\FormFieldNotPublishedException;
...
$topic = $db->loadTopicByName('SomeTopic');
try {
  $secretBankAccount = $topic->getTopicFormNode()->getFormField('BankAccount');
} catch (FormFieldNotPublishedException $e) {
  echo "Sorry, form field not published";
  exit;
}
}}}

{{{
// using silent mode
$config->useStrictPublishedMode = false;
$topic = $db->loadTopicByName('SomeTopic');
$secretBankAccount = $topic->getTopicFormNode()->getFormField('BankAccount');
echo $secretBankAccount; // returns empty string
}}}


= Searching =

Try to keep the amount of queries at minimum. Complex filters should be reimplemented with some sort of caching mechanism if possible. Anyway, the query processing is independent of the TWiki Perl implementation and thus parallel execution will be handled by multiple cores.

== General use of query filters ==
{{{
use twikilib\search\MetaSearch;
...
$search = new MetaSearch($config);
$search->setParentFilter('SomeParentTopic');
$search->setFormNameFilter('UserForm');
$search->setFormFieldFilter('Name', 'Peter.*');
$search->invertLastFilter();
$search->executeQuery();
foreach($search->getResults() as $idx => $topicName) {
  $topic = $db->loadTopicByName($topicName);
  ...
}
}}}

= Working with groups =
== Getting all users of a group (transitively) ==
{{{
use twikilib\wrap\Group;
...
$topic = $db->loadTopicByName('SomeGroup');
$group = new Group($topic);
$groupUsers = $group->getGroupUsers();
}}}

= Working with attachments =
== Searching for topics using attachment comments ==
{{{
use twikilib\search\MetaSearch;
...
$search = new MetaSearch($config);
$search->setAttachCommentFilter('logo_[0-9]+_'); // searches for matching substring or regular expression
$search->executeQuery();
$results = $search->getResults(); // list of topic names
}}}

== Filtering attachments by comment or other attributes ==
This is useful, when we already have an instance of type `ITopic` and we are interested only in attachments matching a given comment, e.g. logos.
{{{
$topic = $db->loadTopicByName('SomeProjectTopic');
$matchingAttachments = $topic->getTopicAttachmentsNode()->getAttachmentsByComment('logo');
// It is also possible to use other attributes for filtering.
$matchingAttachments = $topic->getTopicAttachmentsNode()->getAttachmentsByUser('SomeUser');
$matchingAttachments = $topic->getTopicAttachmentsNode()->getAttachmentsByName('jpg');
}}}


= Cached Images =

== User's e-mail address as PNG image ==
{{{
use twikilib\wrap\UserTopic;
...
$topic = $db->loadTopicByName('SomeUser');
$wrapped = new UserTopic($topic);
$url = $wrapped->getPublicEmailAsImageUrl();
}}}


== Cached image thumbnails ==
Sometimes it is necessary to get a thumbnail of an image.
The API provides mechanism for resizing and caching images.
Such images are then publicly accessible through a URL.

{{{
use twikilib\core\ResultCache;
use twikilib\utils\ImageUtils;
...
$cache = new ResultCache($config, $db);
$callback = function($imgSrcFile, $width, $height) {
  return ImageUtils::createImageThumbnail($imgSrcFile, $width, $height);
};

$url = $cache->getCachedUrl( $callback, $pathToImg, 100, 200); // crop to 100x200

$url = $cache->getCachedUrl( $callback, $pathToImg, 100, 0, false ); // height is resized proportionally to width=100px
$url = $cache->getCachedUrl( $callback, $pathToImg, 0, 80, false );  // width is resized proportionally to height=80px
$url = $cache->getCachedUrl( $callback, $pathToImg, 100, 80, true ); // crop-to-fit 100x80 + grayscale image
}}}